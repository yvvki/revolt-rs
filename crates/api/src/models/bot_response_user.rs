/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.5.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */

/// BotResponseUser : User object



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BotResponseUser {
    /// Unique Id
    #[serde(rename = "_id")]
    pub _id: String,
    /// Username
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<Box<crate::models::UserAvatar>>,
    /// Relationships with other users
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<Vec<crate::models::Relationship>>,
    /// Bitfield of user badges
    #[serde(rename = "badges", skip_serializing_if = "Option::is_none")]
    pub badges: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::UserStatus>>,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Box<crate::models::UserProfile>>,
    /// Enum of user flags
    #[serde(rename = "flags", skip_serializing_if = "Option::is_none")]
    pub flags: Option<i32>,
    /// Whether this user is privileged
    #[serde(rename = "privileged", skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(rename = "bot", skip_serializing_if = "Option::is_none")]
    pub bot: Option<Box<crate::models::UserBot>>,
    /// Current session user's relationship with this user
    #[serde(rename = "relationship", skip_serializing_if = "Option::is_none")]
    pub relationship: Option<Box<crate::models::RelationshipStatus>>,
    /// Whether this user is currently online
    #[serde(rename = "online", skip_serializing_if = "Option::is_none")]
    pub online: Option<bool>,
}

impl BotResponseUser {
    /// User object
    pub fn new(_id: String, username: String) -> BotResponseUser {
        BotResponseUser {
            _id,
            username,
            avatar: None,
            relations: None,
            badges: None,
            status: None,
            profile: None,
            flags: None,
            privileged: None,
            bot: None,
            relationship: None,
            online: None,
        }
    }
}


