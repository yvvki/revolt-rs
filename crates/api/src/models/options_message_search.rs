/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.6.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OptionsMessageSearch {
    /// Full-text search query  See [MongoDB documentation](https://docs.mongodb.com/manual/text-search/#-text-operator) for more information.
    #[serde(rename = "query")]
    pub query: String,
    /// Maximum number of messages to fetch
    #[serde(rename = "limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub limit: Option<Option<i64>>,
    /// Message id before which messages should be fetched
    #[serde(rename = "before", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub before: Option<Option<String>>,
    /// Message id after which messages should be fetched
    #[serde(rename = "after", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub after: Option<Option<String>>,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<crate::models::MessageSort>,
    /// Whether to include user (and member, if server channel) objects
    #[serde(rename = "include_users", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub include_users: Option<Option<bool>>,
}

impl OptionsMessageSearch {
    pub fn new(query: String) -> OptionsMessageSearch {
        OptionsMessageSearch {
            query,
            limit: None,
            before: None,
            after: None,
            sort: None,
            include_users: None,
        }
    }
}


