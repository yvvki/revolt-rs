/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.6.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DataLogin {
    /// Email
    #[serde(rename = "email")]
    pub email: String,
    /// Password
    #[serde(rename = "password")]
    pub password: String,
    /// Friendly name used for the session
    #[serde(rename = "friendly_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<Option<String>>,
    /// Unvalidated or authorised MFA ticket  Used to resolve the correct account
    #[serde(rename = "mfa_ticket")]
    pub mfa_ticket: String,
    #[serde(rename = "mfa_response", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mfa_response: Option<Option<Box<crate::models::DataLoginAnyOf1MfaResponse>>>,
}

impl DataLogin {
    pub fn new(email: String, password: String, mfa_ticket: String) -> DataLogin {
        DataLogin {
            email,
            password,
            friendly_name: None,
            mfa_ticket,
            mfa_response: None,
        }
    }
}


