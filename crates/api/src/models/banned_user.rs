/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.6.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */

/// BannedUser : Just enoguh user information to list bans.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BannedUser {
    /// Id of the banned user
    #[serde(rename = "_id")]
    pub _id: String,
    /// Username of the banned user
    #[serde(rename = "username")]
    pub username: String,
    /// Discriminator of the banned user
    #[serde(rename = "discriminator")]
    pub discriminator: String,
    #[serde(rename = "avatar", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<Option<Box<crate::models::BannedUserAvatar>>>,
}

impl BannedUser {
    /// Just enoguh user information to list bans.
    pub fn new(_id: String, username: String, discriminator: String) -> BannedUser {
        BannedUser {
            _id,
            username,
            discriminator,
            avatar: None,
        }
    }
}


