/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.5.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */

/// RelationshipStatus : User's relationship with another user (or themselves)

/// User's relationship with another user (or themselves)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RelationshipStatus {
    #[serde(rename = "None")]
    None,
    #[serde(rename = "User")]
    User,
    #[serde(rename = "Friend")]
    Friend,
    #[serde(rename = "Outgoing")]
    Outgoing,
    #[serde(rename = "Incoming")]
    Incoming,
    #[serde(rename = "Blocked")]
    Blocked,
    #[serde(rename = "BlockedOther")]
    BlockedOther,

}

impl ToString for RelationshipStatus {
    fn to_string(&self) -> String {
        match self {
            Self::None => String::from("None"),
            Self::User => String::from("User"),
            Self::Friend => String::from("Friend"),
            Self::Outgoing => String::from("Outgoing"),
            Self::Incoming => String::from("Incoming"),
            Self::Blocked => String::from("Blocked"),
            Self::BlockedOther => String::from("BlockedOther"),
        }
    }
}

impl Default for RelationshipStatus {
    fn default() -> RelationshipStatus {
        Self::None
    }
}




