/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.6.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */

/// UserReportReason : Reason for reporting a user

/// Reason for reporting a user
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserReportReason {
    #[serde(rename = "NoneSpecified")]
    NoneSpecified,
    #[serde(rename = "UnsolicitedSpam")]
    UnsolicitedSpam,
    #[serde(rename = "SpamAbuse")]
    SpamAbuse,
    #[serde(rename = "InappropriateProfile")]
    InappropriateProfile,
    #[serde(rename = "Impersonation")]
    Impersonation,
    #[serde(rename = "BanEvasion")]
    BanEvasion,
    #[serde(rename = "Underage")]
    Underage,

}

impl ToString for UserReportReason {
    fn to_string(&self) -> String {
        match self {
            Self::NoneSpecified => String::from("NoneSpecified"),
            Self::UnsolicitedSpam => String::from("UnsolicitedSpam"),
            Self::SpamAbuse => String::from("SpamAbuse"),
            Self::InappropriateProfile => String::from("InappropriateProfile"),
            Self::Impersonation => String::from("Impersonation"),
            Self::BanEvasion => String::from("BanEvasion"),
            Self::Underage => String::from("Underage"),
        }
    }
}

impl Default for UserReportReason {
    fn default() -> UserReportReason {
        Self::NoneSpecified
    }
}




