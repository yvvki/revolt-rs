/*
 * Revolt API
 *
 * Open source user-first chat platform.
 *
 * The version of the OpenAPI document: 0.5.5
 * Contact: contact@revolt.chat
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InviteJoinResponseOneOf {
    #[serde(rename = "type")]
    pub _type: Type,
    /// Channels in the server
    #[serde(rename = "channels")]
    pub channels: Vec<crate::models::Channel>,
    /// Server we are joining
    #[serde(rename = "server")]
    pub server: Option<Box<crate::models::Server>>,
}

impl InviteJoinResponseOneOf {
    pub fn new(_type: Type, channels: Vec<crate::models::Channel>, server: Option<crate::models::Server>) -> InviteJoinResponseOneOf {
        InviteJoinResponseOneOf {
            _type,
            channels,
            server: super::box_option(server),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Server")]
    Server,
}

impl Default for Type {
    fn default() -> Type {
        Self::Server
    }
}

